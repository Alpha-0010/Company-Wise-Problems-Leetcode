// Here, we will sort the intervals array based on start time. Maintain a last integer to store the end time of
the last interval we processed at every interval 'i' check if last>=start time of the curr. interval if yes then update last. Else push the start_time and last into output. And update last=intervals[i][0].

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> output;
        int n=intervals.size();
        if(n==0){
            return output;
        }
        int m=2;
        sort(intervals.begin(),intervals.end());
        int last=intervals[0][1];
        vector<int>v;
        v.push_back(intervals[0][0]);
        for(int i=1;i<n;i++){
            if(last>=intervals[i][0]){
                last=max(last,intervals[i][1]);
            }else{
                v.push_back(last);
                output.push_back(v);
                v.clear();
                v.push_back(intervals[i][0]);
                last=intervals[i][1];
            }
        }
        if(v.size()!=0){
             v.push_back(last);
            output.push_back(v);
        }
        return output;
    }
};