Problem)

Given an Iterator class interface with methods: next() and hasNext(), design and implement a PeekingIterator that support the peek() operation -- it essentially peek() at the element that will be returned by the next call to next().

Example:

Assume that the iterator is initialized to the beginning of the list: [1,2,3].

Call next() gets you 1, the first element in the list.
Now you call peek() and it returns 2, the next element. Calling next() after that still return 2. 
You call next() the final time and it returns 3, the last element. 
Calling hasNext() after that should return false.
Follow up: How would you extend your design to be generic and work with all types, not just integer?

SOl:

class PeekingIterator : public Iterator {
public:
    int iter_next;
    bool iter_hasnext;
	PeekingIterator(const vector<int>& nums) : Iterator(nums) {
	    // Initialize any member here.
	    // **DO NOT** save a copy of nums and manipulate it directly.
	    // You should only use the Iterator interface methods.
	    iter_hasnext=Iterator::hasNext();
        if(iter_hasnext){
            iter_next=Iterator::next();
        }
	}
	
    // Returns the next element in the iteration without advancing the iterator.
	int peek() {
        return iter_next;
	}
	
	// hasNext() and next() should behave the same as in the Iterator interface.
	// Override them if needed.
	int next() {
	    int res=iter_next;
        iter_hasnext=Iterator::hasNext();
        if(iter_hasnext){
            iter_next=Iterator::next();
        }
        return res;
	}
	
	bool hasNext() const {
	    return iter_hasnext;
	}
};

// The problem is a bit unclear in the problem they have said that the next() func. will return the peek elem. and it will advance the pointer by 1. The peek() function will simply return the peek element or in this case the variable iter_next which holds the peek value. hasNext() function returns true if there is an element at the current position fo the iter_next pointer. The constructor is used for initializing the iter_next pointer.